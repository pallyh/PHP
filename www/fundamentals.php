
    <h1>Основы языка PHP</h1>
    <h2>Общая характеристика</h2>
    <p>
        Процедурный язык интерпретируемого(REPL REad-Eval-Print-Loop) типа.
         Синтаксический анализатор проверяет файл-скрипт при открытии, но ошибки выполнения
        в коде проявляются при выполнении.
        Типизация динамическая. 
        Есть поддержка ООп.
        Однопоточный.
        Есть расширения для многопоточных вариантов, но они менее популярны.

    </p>
    <h2>переменные</h2>
    <p>
        Переменные появляются в момент первого присваивания.
        Имя переменной обязательно начинается с "$"
        Область видимости переменной - глобальная, функции имеют
        свои области.
        Видимость переменной не ограничиваются файлом, все подключенные
        "видят" переменные.
    </p>
    <p>
        В силу "глобальной" видимости в подключаемых файлах (во всех файлах)
        желательно проверять не влияем ли м на переменную окружения.
        isset(имя ) - проверяет определена ли переменная (не создавая ошибку обращение к несуществующей переменной)
        unset (имя ) - разрушения переменной, можно использовать
        если необходимо быть уверенным в том, что ранее переменной не было.
        Положительный аспект - по наличию установленной переменной можно определить
        подключается файл к другому файлу или вызывается самостоятельно.
    </p>
    <div style="border: 1px solid green">
        <?php
            $x = 20;
            $x += 10; //арифметический +
            $x .= '.'; // строковый + или .
            $x .= '12';
            if(isset ($x))
            {
                echo "X already defined: $x",
                 is_numeric($x) ? "Numeric" : "Nan";
            } 
            else echo "X not defined";
            #Arrays
            echo "<br/>";
            $arr = [];          //новый стиль
            $arr2 = array();    // старый стилб
            $arr[] = 10;        //push - добавление в массив
            $arr[] = 20;        // без указания индекса - присваиваются
            $arr[] = 30;        // порядковые числа индексы

            foreach($arr as $val){ //for of(по значениям)
                echo "$val <br/>";
            }

            $arr[10] = 'ten'; //указания индекса-ключа
            $arr['five'] = 5;
            $arr[] = 'next';
            $arr['2'] = 200;
            $arr[true] = 'true';

            foreach($arr as $key => $val){ // расширеный и по ключам и по значениям
                echo "arr[$key] = $val <br/>";
            }

            $arr3 = [                   //конструктор массива
                'host' => 'localhost',  //=> ассоциативное присваивание
                'ip' => '127.0.0.1',
                'auth' => [
                    'user' => 'admin',
                    'pass' => '123'
                ]
            ];
            echo count($arr3), '<br/>';
            foreach($arr3 as $key => $val){
                if(is_array($val)){ //если значение в массиве - тоже массив
                    foreach($val as $k => $v)
                    {
                        echo "arr[$key][$k] = $v <br/>";
                    }
                }
                else{
                    echo"arr[$key] = $val <br/>";
                }
            }

            // внутренняя индексация = дополнительные [],
           //  вложенность не ограничена
            //arr3['auth']['pass']     

            const CONST_VALUE = 100500; //КОНСТАНТА БЕЗ $, рекомен CAPITAL_CASE
            echo CONST_VALUE, '<br/>';

            echo makeHello(), ',  ', makeHello(" User "), '<br/>';

            function makeHello($user = "Admin") { //значения по умолчанию есть
               global $x;
                return "Hello $user" 
                . CONST_VALUE
                . $x;
            }


        ?>

    </div>
